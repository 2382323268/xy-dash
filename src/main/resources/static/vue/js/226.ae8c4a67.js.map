{"version":3,"file":"js/226.ae8c4a67.js","mappings":"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","sources":["webpack://xy-dash-admin/./src/views/config/migration/operation/components/table.vue","webpack://xy-dash-admin/./src/views/config/migration/operation/components/table.vue?d6d7"],"sourcesContent":["<template>\r\n  <el-form :model=\"migrationsForm\" label-width=\"150px\">\r\n    <el-form-item\r\n      label=\"添加数据库\"\r\n      prop=\"migrationDataSources\"\r\n      v-for=\"(item, index) in databaseIndexRef\"\r\n      :key=\"index\"\r\n    >\r\n      <el-col :span=\"8\">\r\n        <el-cascader\r\n          ref=\"databaseRef\"\r\n          v-model=\"migrationsForm.databaseName[index]\"\r\n          :props=\"options\"\r\n          :show-all-levels=\"false\"\r\n          @change=\"changeDataSources($event, index)\"\r\n          clearable\r\n        />\r\n      </el-col>\r\n      <el-col :span=\"2\">\r\n        <span style=\"color: var(--el-text-color-regular)\">唯一名称</span>\r\n      </el-col>\r\n      <el-col :span=\"10\">\r\n        <el-input\r\n          style=\"height: 35px; width: 300px\"\r\n          v-model=\"migrationsForm.migrationDataSources[index].uniqueName\"\r\n        />\r\n      </el-col>\r\n      <el-col :span=\"3\">\r\n        <el-button v-if=\"index == 0\" type=\"primary\" @click=\"addDatabase\" plain\r\n          >+新增数据库</el-button\r\n        ></el-col\r\n      >\r\n    </el-form-item>\r\n\r\n    <el-form-item\r\n      label=\"选择迁移表\"\r\n      v-for=\"(item, index) in tableIndexRef\"\r\n      :key=\"index\"\r\n    >\r\n      <el-col :span=\"8\">\r\n        <el-cascader\r\n          ref=\"tableRef\"\r\n          v-model=\"migrationsForm.data[index]\"\r\n          :props=\"tableOptions\"\r\n          :show-all-levels=\"false\"\r\n          @change=\"changeTable($event, index, 1)\"\r\n        />\r\n      </el-col>\r\n\r\n      <el-col :span=\"2\">\r\n        <span style=\"color: var(--el-text-color-regular)\">选择主数据表</span>\r\n      </el-col>\r\n      <el-col :span=\"6\">\r\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <el-cascader\r\n          ref=\"tableRefSources\"\r\n          v-model=\"migrationsForm.dataSources[index]\"\r\n          :props=\"tableOptions\"\r\n          :show-all-levels=\"false\"\r\n          @change=\"changeTable($event, index, 2)\"\r\n        />\r\n      </el-col>\r\n      <el-col :span=\"1\">\r\n        <span style=\"color: var(--el-text-color-regular)\">权重</span>\r\n      </el-col>\r\n      <el-col :span=\"4\">\r\n        <el-input-number v-model=\"positionRef[index]\" />\r\n      </el-col>\r\n      <el-col :span=\"3\">\r\n        <el-button v-if=\"index == 0\" type=\"primary\" @click=\"addTable\" plain\r\n          >+新增表</el-button\r\n        ></el-col\r\n      >\r\n    </el-form-item>\r\n  </el-form>\r\n</template>\r\n<script setup>\r\nimport {\r\n  defineEmits,\r\n  defineExpose,\r\n  onMounted,\r\n  defineProps,\r\n  ref,\r\n  computed,\r\n  watch,\r\n  reactive,\r\n} from \"vue\";\r\nimport requestUtil from \"@/util/request\";\r\nimport { ElMessage } from \"element-plus\";\r\nconst databaseRef = ref(null);\r\nconst databaseIndexRef = ref([0]);\r\nconst tableRef = ref(null);\r\nconst positionRef = reactive([]);\r\nconst tableRefSources = ref(null);\r\nconst tableIndexRef = ref([0]);\r\nlet tableOptions = ref({});\r\nlet newPositionRef = computed(() => {\r\n  return JSON.stringify(positionRef);\r\n});\r\nconst options = ref({\r\n  lazy: true,\r\n  lazyLoad(node, resolve) {\r\n    const { level } = node;\r\n    setTimeout(() => {\r\n      let data = null;\r\n      if (level == 1) {\r\n        // 等于1代表二级目录 获取数据库下所有库\r\n        data = getDatabase(node.value.split(\";\")[0]);\r\n      } else {\r\n        // 根目录获取所有数据库配置\r\n        data = getMigrationData();\r\n      }\r\n      data.then((result) => {\r\n        if (result == null) {\r\n          resolve([]);\r\n        }\r\n        const nodes = result.map((item) => ({\r\n          value: level === 1 ? item : item.id + \";\" + item.type,\r\n          label: level === 1 ? item : item.name,\r\n          leaf: level >= 1,\r\n        }));\r\n\r\n        // 通过调用resolve将子节点数据返回，通知组件数据加载完成\r\n        resolve(nodes);\r\n      });\r\n    }, 10);\r\n  },\r\n});\r\nconst props = defineProps({\r\n  migrationsForm: {\r\n    type: Object,\r\n    default: null,\r\n    required: true,\r\n  },\r\n});\r\nconst changeDataSources = function (value, index) {\r\n  if (value != null) {\r\n    const parent = databaseRef.value[index].getCheckedNodes()[0].parent.data;\r\n    const res = parent.value.split(\";\");\r\n    const filter = props.migrationsForm.migrationDataSources.filter((e) => {\r\n      return e.databaseName == value[1] && e.sourceId == res[0];\r\n    });\r\n    if (filter.length > 0) {\r\n      props.migrationsForm.migrationDataSources[index] = {};\r\n      props.migrationsForm.data = props.migrationsForm.data.map((e) => {\r\n        let reset = true;\r\n        props.migrationsForm.databaseName.forEach((v) => {\r\n          if (v[1] == e[0].split(\";\")[0]) {\r\n            reset = false;\r\n          }\r\n        });\r\n        if (reset == true) {\r\n          return null;\r\n        }\r\n        return e;\r\n      });\r\n      props.migrationsForm.dataSources = props.migrationsForm.dataSources.map(\r\n        (e) => {\r\n          let reset = true;\r\n          props.migrationsForm.databaseName.forEach((v) => {\r\n            if (v[1] == e[0].split(\";\")[0]) {\r\n              reset = false;\r\n            }\r\n          });\r\n          if (reset == true) {\r\n            return null;\r\n          }\r\n          return e;\r\n        }\r\n      );\r\n      props.migrationsForm.databaseName[index] = null;\r\n      ElMessage.error(\"已存在相同配置\");\r\n    } else {\r\n      if (props.migrationsForm.migrationDataSources[index] != null) {\r\n        const uniqueName =\r\n          props.migrationsForm.migrationDataSources[index].uniqueName;\r\n        props.migrationsForm.dataSources = props.migrationsForm.dataSources\r\n          .filter((e) => JSON.stringify(e) != \"[]\" && e != null)\r\n          .filter((e) => {\r\n            return (\r\n              e[0].split(\";\")[1] !=\r\n                props.migrationsForm.migrationDataSources[index].sourceId ||\r\n              props.migrationsForm.migrationDataSources[index].databaseName !=\r\n                e[0].split(\";\")[0]\r\n            );\r\n          });\r\n        props.migrationsForm.data = props.migrationsForm.data\r\n          .filter((e) => JSON.stringify(e) != \"[]\" && e != null)\r\n          .filter((e) => {\r\n            return (\r\n              e[0].split(\";\")[1] !=\r\n                props.migrationsForm.migrationDataSources[index].sourceId ||\r\n              props.migrationsForm.migrationDataSources[index].databaseName !=\r\n                e[0].split(\";\")[0]\r\n            );\r\n          });\r\n        props.migrationsForm.migrationDataSources[index] = {};\r\n        props.migrationsForm.migrationDataSources[index].uniqueName =\r\n          uniqueName;\r\n      }\r\n      props.migrationsForm.migrationDataSources[index].databaseName = value[1];\r\n      props.migrationsForm.migrationDataSources[index].idx =\r\n        props.migrationsForm.databaseName[index][0];\r\n      props.migrationsForm.migrationDataSources[index].sourceId = res[0];\r\n      props.migrationsForm.migrationDataSources[index].type = Number(res[1]);\r\n    }\r\n    props.migrationsForm.migrationDataSources[index];\r\n\r\n    setTimeout(function () {\r\n      test();\r\n    }, 10);\r\n  } else {\r\n    props.migrationsForm.migrationDataSources[index] = {};\r\n  }\r\n};\r\nconst changeTable = function (value, index, status) {\r\n  let ref = null;\r\n  let sourceName = null;\r\n  let sourceUniqueName = null;\r\n  let name = null;\r\n  let indexv = null;\r\n  if (status == 1) {\r\n    indexv = props.migrationsForm.data[index][0];\r\n    ref = tableRef;\r\n    if (tableRefSources.value[index].getCheckedNodes()[0] != null) {\r\n      const parent =\r\n        tableRefSources.value[index].getCheckedNodes()[0].parent.data;\r\n      const res = parent.value.split(\";\");\r\n      sourceUniqueName = res[2];\r\n      sourceName = tableRefSources.value[index].getCheckedNodes()[0].label;\r\n    }\r\n  } else {\r\n    indexv = props.migrationsForm.dataSources[index][0];\r\n    ref = tableRefSources;\r\n    if (tableRef.value[index].getCheckedNodes()[0] != null) {\r\n      name = tableRef.value[index].getCheckedNodes()[0].label;\r\n    }\r\n  }\r\n  if (value != null) {\r\n    props.migrationsForm.migrationDataSources =\r\n      props.migrationsForm.migrationDataSources.map((e) => {\r\n        if (e.migrationTables != null) {\r\n          e.migrationTables = e.migrationTables.filter((v) => {\r\n            return (\r\n              v.migration != (status == 1) ||\r\n              v.random != tableIndexRef.value[index]\r\n            );\r\n          });\r\n        }\r\n        return e;\r\n      });\r\n\r\n    const parent = ref.value[index].getCheckedNodes()[0].parent.data;\r\n    const res = parent.value.split(\";\");\r\n    const databaseName = res[0];\r\n    const sourceId = res[1];\r\n    const uniqueName = res[2];\r\n    const databaseType = res[3];\r\n    const databaseIndex = res[4];\r\n    const position = positionRef[index];\r\n    let data = {\r\n      migration: status == 1,\r\n      position: position,\r\n      name: value[1],\r\n      idx: indexv,\r\n      random: tableIndexRef.value[index],\r\n      uniqueName: uniqueName,\r\n      sourceName: sourceName,\r\n      sourceUniqueName: sourceUniqueName,\r\n      type: databaseType,\r\n    };\r\n\r\n    if (\r\n      props.migrationsForm.migrationDataSources[databaseIndex]\r\n        .migrationTables == null\r\n    ) {\r\n      props.migrationsForm.migrationDataSources[databaseIndex].migrationTables =\r\n        [];\r\n    }\r\n    props.migrationsForm.migrationDataSources[\r\n      databaseIndex\r\n    ].migrationTables.push(data);\r\n    if (name != null) {\r\n      let data = props.migrationsForm.migrationDataSources[\r\n        databaseIndex\r\n      ].migrationTables\r\n        .filter((e) => {\r\n          return e.name == name;\r\n        })\r\n        .map((e) => {\r\n          e.sourceName = value[1];\r\n          e.sourceUniqueName = uniqueName;\r\n        });\r\n    }\r\n  } else {\r\n    // props.migrationsForm.migrationDataSources\r\n    //   .filter((e) => JSON.stringify(e) != \"{}\")\r\n    //   .forEach((e) => {\r\n    //     e.migrationTables.forEach((v) => {\r\n    //       if(v.databaseName == databaseName && v.sourceId == sourceId && v.)\r\n    //     });\r\n    //   });\r\n  }\r\n};\r\n\r\nconst addDatabase = function () {\r\n  props.migrationsForm.migrationDataSources.push({});\r\n  props.migrationsForm.databaseName.push([]);\r\n\r\n  databaseIndexRef.value.push(1);\r\n};\r\nconst addTable = function (value) {\r\n  props.migrationsForm.dataSources.push([]);\r\n  props.migrationsForm.data.push([]);\r\n  tableIndexRef.value.push(\r\n    typeof value != \"number\" ? \"\" + parseInt(Math.random() * 1000000) : value\r\n  );\r\n};\r\n\r\nconst getMigrationData = async () => {\r\n  const res = await requestUtil.get(\"admin_api/v1/dataSources/list\");\r\n  return res.data.data;\r\n};\r\nconst getDatabase = async (id) => {\r\n  const res = await requestUtil.get(\"admin_api/v1/dataBase/\" + id);\r\n  return res.data.data;\r\n};\r\nconst getTable = async (id, dataName) => {\r\n  const res = await requestUtil.get(\r\n    \"admin_api/v1/dataBase//queryTable/\" + id + \"?dataName=\" + dataName\r\n  );\r\n  return res.data.data;\r\n};\r\nconst tableInit = (migrationsForm) => {\r\n  let first = true;\r\n  let firstTableSources = true;\r\n  var map = new Map();\r\n  var sourceMap = new Map();\r\n  var set = new Set();\r\n  test();\r\n  migrationsForm.migrationDataSources.forEach((e, index) => {\r\n    migrationsForm.databaseName.push([\r\n      e.sourceId + \";\" + e.type,\r\n      e.databaseName,\r\n    ]);\r\n    if (first != true) {\r\n      addDatabase();\r\n    } else {\r\n      first = false;\r\n    }\r\n    if (e.migrationTables != null) {\r\n      e.migrationTables\r\n        .filter((e) => e.random != null)\r\n        .forEach((v) => {\r\n          let data = null;\r\n          if (v.migration == true) {\r\n            data = [\r\n              e.databaseName +\r\n                \";\" +\r\n                e.sourceId +\r\n                \";\" +\r\n                e.uniqueName +\r\n                \";\" +\r\n                e.type +\r\n                \";\" +\r\n                index,\r\n\r\n              v.name,\r\n            ];\r\n            map.set(v.random, data);\r\n\r\n            positionRef.push(v.position);\r\n            if (firstTableSources != true) {\r\n              addTable(v.random);\r\n            } else {\r\n              firstTableSources = false;\r\n            }\r\n          } else {\r\n            data = [\r\n              e.databaseName +\r\n                \";\" +\r\n                e.sourceId +\r\n                \";\" +\r\n                e.uniqueName +\r\n                \";\" +\r\n                e.type +\r\n                \";\" +\r\n                index,\r\n\r\n              v.name,\r\n            ];\r\n            sourceMap.set(v.random, data);\r\n          }\r\n          set.add(v.random);\r\n        });\r\n    }\r\n  });\r\n  for (let item of tableIndexRef.value) {\r\n    migrationsForm.dataSources.push(sourceMap.get(item));\r\n    migrationsForm.data.push(map.get(item));\r\n  }\r\n};\r\nconst tableformRef = ref(null);\r\nconst test = () => {\r\n  tableOptions.value = {\r\n    lazy: true,\r\n    lazyLoad(node, resolve) {\r\n      const { level } = node;\r\n      setTimeout(() => {\r\n        let data = null;\r\n        if (level == 1) {\r\n          // 等于1代表二级目录 获取数据库下所有库\r\n          const value = node.value.split(\";\");\r\n          data = getTable(value[1], value[0]);\r\n          data.then((result) => {\r\n            if (result == null) {\r\n              resolve([]);\r\n            }\r\n            const nodes = result.map((item) => ({\r\n              value: item,\r\n              label: item,\r\n              leaf: level >= 1,\r\n            }));\r\n\r\n            // 通过调用resolve将子节点数据返回，通知组件数据加载完成\r\n            resolve(nodes);\r\n          });\r\n        } else {\r\n          // 根目录获取所有数据库配置\r\n          data = props.migrationsForm.migrationDataSources;\r\n          if (data == null) {\r\n            resolve([]);\r\n          }\r\n          data = data.filter((e) => JSON.stringify(e) != \"{}\");\r\n          if (data == null) {\r\n            resolve([]);\r\n          }\r\n          const nodes = data.map((item, index) => ({\r\n            value:\r\n              item.databaseName +\r\n              \";\" +\r\n              item.sourceId +\r\n              \";\" +\r\n              item.uniqueName +\r\n              \";\" +\r\n              item.type +\r\n              \";\" +\r\n              index,\r\n            label: item.databaseName,\r\n            leaf: level >= 1,\r\n          }));\r\n\r\n          if (nodes.length == 0) {\r\n            resolve([]);\r\n          }\r\n          // 通过调用resolve将子节点数据返回，通知组件数据加载完成\r\n          resolve(nodes);\r\n        }\r\n      }, 10);\r\n    },\r\n  };\r\n};\r\n\r\ndefineExpose({\r\n  tableformRef,\r\n  tableInit,\r\n});\r\n\r\nwatch(newPositionRef, (n, o) => {\r\n  const newValue = JSON.parse(n);\r\n  const oldValue = JSON.parse(o);\r\n  newValue.forEach((e, index) => {\r\n    const indexOf = tableIndexRef.value[index];\r\n    props.migrationsForm.migrationDataSources.forEach((x) => {\r\n      if (x.migrationTables == null) {\r\n        return;\r\n      }\r\n      x.migrationTables.forEach((z) => {\r\n        if (z.random == indexOf) {\r\n          z.position = e;\r\n        }\r\n      });\r\n    });\r\n  });\r\n});\r\n</script>\r\n<style scoped>\r\n.el-form-item {\r\n  margin-bottom: 25px;\r\n}\r\n</style>\r\n","import script from \"./table.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./table.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./table.vue?vue&type=style&index=0&id=1028fd36&scoped=true&lang=css\"\n\nimport exportComponent from \"D:\\\\bs\\\\wxw\\\\xy-dash-admin\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1028fd36\"]])\n\nexport default __exports__"],"names":["databaseRef","ref","databaseIndexRef","tableRef","positionRef","reactive","tableRefSources","tableIndexRef","tableOptions","newPositionRef","computed","JSON","stringify","options","lazy","lazyLoad","node","resolve","level","setTimeout","data","getDatabase","value","split","getMigrationData","then","result","nodes","map","item","id","type","label","name","leaf","changeDataSources","index","parent","getCheckedNodes","res","filter","props","migrationsForm","migrationDataSources","e","databaseName","sourceId","length","reset","forEach","v","dataSources","ElMessage","uniqueName","idx","Number","test","changeTable","status","sourceName","sourceUniqueName","indexv","migrationTables","migration","random","databaseType","databaseIndex","position","push","addDatabase","addTable","parseInt","Math","async","requestUtil","getTable","dataName","tableInit","first","firstTableSources","Map","sourceMap","set","Set","add","get","tableformRef","expose","watch","n","o","newValue","parse","indexOf","x","z","__exports__"],"sourceRoot":""}