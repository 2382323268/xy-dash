package com.xy.data.handler;

import com.xy.data.entity.${templatesTable.sourceUniqueName}.${templatesTable.sourceName};
import com.xy.data.entity.${templatesTable.uniqueName}.${templatesTable.entityName};
import com.xy.data.handler.v3.PageAndKeyDataPushV3Handler;
import com.xy.data.mapper.${templatesTable.uniqueName}.${templatesTable.mapperName};
import com.xy.data.util.BeanUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * @Author: xiangwei
 * @Date: 2022/7/18 10:06
 * @Description
 **/
@Component
@Slf4j
public class ${templatesTable.handlerName} extends PageAndKeyDataPushV3Handler<${templatesTable.entityName}, ${templatesTable.sourceName}> {
    ${templatesTable.handlerName}() {
        super(${templatesTable.entityName}.class, ${templatesTable.sourceName}.class, ${templatesTable.mapperName}.class,  null,
                null);
    }

    @Override
    protected List<${templatesTable.entityName}> getData(List<${templatesTable.sourceName}> data) {
        List<${templatesTable.entityName}> ${templatesTable.lowerEntityName}List = new ArrayList();
        data.forEach(e -> {
            ${templatesTable.entityName} ${templatesTable.lowerEntityName} = ${templatesTable.entityName}.builder()
    #foreach(${templatesFields} in ${templatesTable.templatesFields})
        #if("$!templatesFields.propertyType" == "byte[]")
            #set($propertyType="Byte")
        #else
            #set($propertyType=${templatesFields.propertyType})
        #end
        #if("$!templatesFields.valueType" == "byte[]")
            #set($valueType="Byte")
        #else
            #set($valueType=${templatesFields.valueType})
        #end
        #if("$!{templatesFields.propertyType}" != "String")
            #set($toValue="StringTo"+${propertyType}+"("""+${templatesFields.defaulted}+""")")
        #else
            #set($toValue=""""+${templatesFields.defaulted}+"""")
        #end
        #if("$!{templatesFields.propertyType}" != "$!templatesFields.valueType")
            #set($to=${valueType}+"To"+${propertyType}+"(e.get"+${templatesFields.value}+"())")
        #else
            #set($to="e.get"+${templatesFields.value}+"()")
        #end
        #if("$!templatesFields.valueMap" == "")
        #else
        #end
        #if("$!{templatesFields.value}" == "")
            #if("$!{templatesFields.defaulted}" != "")
                    .${templatesFields.lowerPropertyName}($toValue)
            #end
        #else
            #if("$!{templatesFields.defaulted}" != "")
                    .${templatesFields.lowerPropertyName}($to == null ? $toValue : $to)
            #else
                    .${templatesFields.lowerPropertyName}($to)
            #end
        #end
    #end
                    .build();

            ${templatesTable.lowerEntityName}List.add(${templatesTable.lowerEntityName});
        });
        return ${templatesTable.lowerEntityName}List;
    }

    @Override
    protected void deleteBeforeExtension(List<${templatesTable.sourceName}> r, List<${templatesTable.entityName}> t) {

    }

    @Override
    protected void saveBeforeExtension(List<${templatesTable.sourceName}> r, List<${templatesTable.entityName}> t) {

    }

    @Override
    protected void saveAfterExtension(List<${templatesTable.sourceName}> r, List<${templatesTable.entityName}> t) {

    }

    @Override
    public Integer getPosition() {
        return ${templatesTable.position};
    }
}
